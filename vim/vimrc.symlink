" ____   ____.__  .__                                            .___
" \   \ /   /|__| |__| _____ _____________  _______  __ ____   __| _/
"  \   Y   / |  | |  |/     \\____ \_  __ \/  _ \  \/ // __ \ / __ |
"   \     /  |  | |  |  Y Y  \  |_> >  | \(  <_> )   /\  ___// /_/ |
"    \___/   |__| |__|__|_|  /   __/|__|   \____/ \_/  \___  >____ |
"                          \/|__|                          \/     \/
"
" PLUGINS {{{

" Filetype must be 'on' before setting it 'off' otherwise it exits
" with a bad status and breaks git commit.
filetype on
filetype off

" AUTO_INSTALL VIM_PLUG:
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall
endif

call plug#begin('~/.vim/plugged')

" Manual install plugins command: PluginInstall

" SYNTAX: ADDITIONAL SYNTAXES THAT CAN BE USED
Plug 'tpope/vim-git', { 'for': 'git' }

" FUGITIVE: GIT FROM WITHIN VIM
Plug 'tpope/vim-fugitive'

" LIGHTLINE: A LIGHT AND CONFIGURABLE STATUS AND TABLINE PLUGIN FOR VIM
Plug 'itchyny/lightline.vim'

Plug 'junegunn/vim-easy-align'

" NAVIGATOR: VIM TMUX NAVIGATOR
Plug 'christoomey/vim-tmux-navigator'

call plug#end()

" Enable syntax and plugins (for netrw)
syntax enable

" Enable detection, plugins and indent
filetype plugin indent on

if has('autocmd')
    autocmd filetype python set expandtab
endif

" END }}}
" FOLD {{{

" Set fold maker, string (default: "{{{,}}}")
set foldmethod=marker

" END }}}
" FILES {{{

" Search down into subfolders
" Provides tab completion for all file related tasks
set path+=**

" Display all matching files when we tab complete
set wildmenu
set wildmode=list:longest,full

" FILE BROWSING:

" Tweaks for browsing
let g:netrw_banner=0        " disable annoying banner
"let g:netrw_browse_split=4  " open in prior window
"let g:netrw_altv=1          " open splits to the right
let g:netrw_listsytle=3     " tree view
"let g:netrw_list_hide= netrw_gitignore#Hide()
"let g:netrw_list_hide.=',\(^\|\s\s\)\zs\.\S\+'

" NOW WE CAN:
" - :edit a folder to open a file browser
" - <CR>/v/r to open in an h-split/v-split/tab
" - check |netrw-browse-maps| for more mappings

" END }}}
" OPTIONS {{{

" It hides buffers instead of closing them. This means that you
" can have unwritten changes to a file and open a new file using
" :e, without being force to write or undo your changes first.
set hidden
set showmatch           " Show the corresponding object.
set expandtab           " Use spaces instead of tabs.
set smarttab            " Insert tabs on the start of a line according to shiftwith, not tabstop.
set shiftround          " Round indent to multiple of 'shiftwidth'.
set shiftwidth=4        " Number of spaces to user for autoindenting.
set tabstop=4           " Number of spaces is a tab.
set autoindent          " Automatically indent when opening a new line.
set copyindent          " Copy the previous indentation on autoindenting.
set smartindent
set hlsearch            " Highlight search terms.
set ignorecase          " Ignore case when searching.
set smartcase           " Ignore case when search pattern is all lowercase.
set incsearch           " Show search matches when you type.
set noshowmode          " Don't show the mode information.
set history=1000        " Remember more commands and search history.
set undolevels=1000     " Remember more levels of undo.
set wildignore=*.swp
set wildignorecase
set title
set linebreak
set tw=500              " Linebreak on 500 characters
set noswapfile          " Disable swap files

set showtabline=1       " Show tabline when there are atleast two tab pages
set spell               " Set spell checking on.

hi clear SpellBad
hi SpellBad     cterm=underline

set splitbelow
set splitright

" Navigate the vim splits with shortcuts
if empty(glob("~/.vim/plugged/vim-tmux-navigator/"))
    nnoremap <c-j> <c-w>j
    nnoremap <c-k> <c-w>k
    nnoremap <c-h> <c-w>h
    nnoremap <c-l> <c-w>l
endif

" END }}}
" STATUSLINE {{{

" Always display the statusline
set laststatus=2

let g:lightline = {
    \ 'colorscheme': 'wombat',
    \ 'active': {
    \   'left': [   [ 'mode', 'paste' ],
    \               [ 'buffer', 'readonly', 'filename', 'modified' ] ]
    \ },
    \ 'component_function': {
    \   'buffer': 'GetBuffer',
    \   'gitbranch': 'fugitive#head',
    \   'filename' : 'LightLineFilename'
    \ },
    \ }

function! GetBuffer()
    return bufnr('%')
endfunction

function! LightLineFilename()
    return expand('%') !=# '' ? expand('%') : '[No Name]'
endfunction

" END }}}
" CURSOR LINE {{{

" Turn on CursorLine
set cursorline

" Highlight matching parenthesis
hi MatchParen cterm=bold ctermfg=red ctermbg=none

" Display line numbers
set number relativenumber

" Show CursorLine only in the selected window
augroup CursorLine
    au!
    au VimEnter * setlocal cursorline
    au WinEnter * setlocal cursorline
    au BufWinEnter * setlocal cursorline
    au WinLeave * setlocal nocursorline
augroup END

" Higlight Cursorline
hi LineNr           cterm=NONE  ctermfg=DarkGrey  ctermbg=black   gui=NONE    guifg=#282822   guibg=#7F7F7F
hi CursorLineNr     cterm=bold  ctermfg=white     ctermbg=black   gui=NONE    guifg=#282822   guibg=#7F7F7F
hi CursorLine       cterm=NONE  ctermfg=none      ctermbg=236     gui=none    guibg=NONE      guifg=NONE

" END }}}
" COLORS FONTS {{{

" Enable syntax highlighting
syntax enable
set background=dark
set t_Co=256

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Set list unprintable charachters
set listchars=tab:\|\ ,trail:~,extends:>,precedes:<,nbsp:•,eol:¶

hi Todo             cterm=none  ctermfg=9       ctermbg=11
hi NonText          cterm=none  ctermfg=244     ctermbg=none
hi SpecialKey       cterm=none  ctermfg=244     ctermbg=none

" END }}}
" CUSTOM MAPPINGS {{{

" Change the leader key from \ to ,
let mapleader=","

" Open local-directory browser on the current file's directory
nnoremap <silent> <leader>x :Texplore<CR>
" Show buffers
nnoremap <silent> <leader>b :buffers<CR>
" Delete current buffer
nnoremap <silent> <leader>d :bdelete<CR>
" Edit the vimrc file
nnoremap <silent> <leader>v :edit $MYVIMRC<CR>
" Reload the vimrc file
nnoremap <silent> <leader>s :source $MYVIMRC<CR>
" Clear hightlighted searches
nnoremap <silent> <leader>/ :nohlsearch<CR>
" Wildcard search
nnoremap <leader>e :edit **/*
" Highlight all tags
nnoremap <silent> <leader><F10> :source tags.vim<CR>
" Toggle list (display unprintable characters)
nnoremap <F3> : set list!<CR>

" Switch to paste mode
set pastetoggle=<F2>

" This lets you use w!! after you opened the file already, but forgot sudo.
cmap w!! w !sudo tee % >/dev/null

" END }}}
" THINGS TO DO {{{

" TAG JUMPING:

" Create the 'tags' (may need to install ctags first)
"command: MageTags :ctags -R .

" NOW WE CAN:
" - Use ^] to jump to tag under cursor
" - Use G^] for ambiguous tags
" - USe ^t to jump back up the tag stack

" THINGS TO CONSIDER:
" - This doesn't help if you want a visual list of tags

" AUTOCOMPLETE:

" The good stuff is documented int |ins-completion|

" HIGHLIGHTS:
" - ^x^n for JUST this file
" - ^x^f for filenames (works with our path trick)
" - ^x^] for tags only
" - ^n for anything specified by the 'complete' option

" NOW WE CAN:
" - Use ^n and ^p to go back and forth in the suggestion list

" SNIPPETS:

" Read an empty HTML template and move cursor to title
"nnoremap ,html "-1read $HOME/.vim/.skeleton.html<CR>3jwf>a

" NOW WE CAN:
" - Take of the world! (with much fewer keystrokes)

" BUILD INTEGRATION:

" Steal Mr. Bradley's formatter & add it to our spec_helper
" http://philipbradley.net/rspec-into-vim-with-quickfix

" Configure the 'make' command to run RSpec
"set makeprg=bundle\ exec\ rspec\ -f\ QuickfixFormatter

" NOW WE CAN:
" - Run :make to run RSpec
" - :cl to list errors
" - :cc# to jump to error by number
" - :cn and :cp to navigate forward and back

" END }}}
