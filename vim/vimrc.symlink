" ____   ____.__  .__                                            .___
" \   \ /   /|__| |__| _____ _____________  _______  __ ____   __| _/
"  \   Y   / |  | |  |/     \\____ \_  __ \/  _ \  \/ // __ \ / __ |
"   \     /  |  | |  |  Y Y  \  |_> >  | \(  <_> )   /\  ___// /_/ |
"    \___/   |__| |__|__|_|  /   __/|__|   \____/ \_/  \___  >____ |
"                          \/|__|                          \/     \/

" This must be first, because it changes other options as side effect
set nocompatible

" Enable syntax and plugins (for netrw)
syntax enable

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""
""" Auto-install vim-plug
"""
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall
endif

call plug#begin('~/.vim/plugged')

"""
""" Git: Plugins for git usage
""'
" Fugitive: Git from within Vim
Plug 'tpope/vim-fugitive'

filetype plugin on
filetype plugin indent on

if has('autocmd')
    autocmd filetype python set expandtab
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" FINDING FILES
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Search down into subfolders
" Provides tab completion for all file related tasks
set path+=**

" Display all matching files when we tab complete
set wildmenu

" NOW WE CAN:
" - Hit tab to :find by partial match
" - Use * to make it fuzzy

" THINGS TO CONSIDER:
" - :b lets you autocomplete any open buffer

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Options
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" It hides buffers instead of closing them. This means that you
" can have unwritten changes to a file and open a newe file using
" :e, without being force to write or undoe your changes first.
set hidden
set showmatch       " Show the corresponding object.
set expandtab       " Use spaces instead of tabs.
set smarttab        " Insert tabs on the start of a line according to shiftwith, not tabstop.
set shiftround      " Round indent to multiple of 'shiftwidth'.
set shiftwidth=4    " Number of spaces to user for autoindenting.
set tabstop=4       " Number of spaces is a tab.
set autoindent      " Automatically indent when opening a new line.
set copyindent      " Copy the previous indentation on autoindenting.
set smartindent
set hlsearch        " Highlight search terms.
set ignorecase      " Ignore case when searching.
set smartcase       " Ignore case when search pattern is all lowercase.
set incsearch       " Show search matches when you type.

set history=1000    " Remeber more commands and search history.
set undolevels=1000 " Remeber more levels of undo.
set wildignore=*.swp
set title

" Linebreak on 500 characters
set linebreak
set tw=500

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Status line
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set statusline=                           " Clear the statusline
set statusline+=%<\                       " cut at start
set statusline+=%2*[%n%H%M%R%W]%*\        " flags and buf no
set statusline+=%-40f\                    " path
set statusline+=%=%1*%y%*%*\              " file type
set statusline+=%10((%l,%c)%)\            " line and column
set statusline+=%P                        " percentage of file

" Always display the statusline
set laststatus=2

" Hightlight the statusline
hi statusline cterm=none ctermfg=none ctermbg=black

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Cursor line
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Higlight Cursor line
set cursorline

" Highlight matching parenthesis
hi MatchParen cterm=bold ctermfg=red ctermbg=none

" Display line numbers
set number relativenumber

hi LineNr cterm=NONE ctermfg=DarkGrey ctermbg=NONE gui=NONE guifg=#282822 guibg=#7F7F7F
hi CursorLineNr cterm=bold ctermfg=white ctermbg=NONE gui=NONE guifg=#282822 guibg=#7F7F7F
hi CursorLine cterm=NONE ctermbg=236 ctermfg=NONE guibg=NONE guifg=NONE

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Colors and Fonts
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Enable syntax highlighting
syntax enable
set background=dark
set t_Co=256

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Set list unprintable charachters
set listchars=tab:\|\ ,trail:~,extends:>,precedes:<,nbsp:•,eol:¶

hi NonText ctermfg=244 guifg=grey
hi SpecialKey ctermfg=244 guifg=grey

" Highlight Mode Message
hi ModeMsg ctermfg=31 ctermbg=none

" Use Unix as the standard file type
"set ff=unix,dos,mac

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Custom mapping
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Change the leader key from \ to ,
let mapleader=","

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

" Clear hightlighted searches
nmap <silent> <leader>/ :nohlsearch<CR>

" Switch to paste mode
set pastetoggle=<F2>

" Toggle list (display unprintable characters)
nnoremap <F3> : set list!<CR>

" This lets you use w!! after you opened the file already, but forgot sudo.
cmap w!! w !sudo tee % >/dev/null

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" THINGS TO DO
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" TAG JUMPING:

" Create the 'tags' (may need to install ctags first)
"command: MageTags :ctags -R .

" NOW WE CAN:
" - Use ^] to jump to tag under cursor
" - Use G^] for ambiguous tags
" - USe ^t to jump back up the tag stack

" THINGS TO CONSIDER:
" - This doesn't help if you want a visual list of tags

" AUTOCOMPLETE:

" The good stuff is documented int |ins-completion|

" HIGHLIGHTS:
" - ^x^n for JUST this file
" - ^x^f for filenames (works with our path trick)
" - ^x^] for tags only
" - ^n for anything specified by the 'complete' option

" NOW WE CAN:
" - Use ^n and ^p to go back and forth in the suggestion list

" FILE BROWSING:

" Tweaks for browsing
"let g:netrw_banner=0        " disable annoying banner
"let g:netrw_browse_split=4  " open in prior window
"let g:netrw_altv=1          " open splits to the right
"let g:netrw_listsytle=3     " tree view
"let g:netrw_list_hide= netrw_gitignore#Hide()
"let g:netrw_list_hide.=',\(^\|\s\s\)\zs\.\S\+'

" NOW WE CAN:
" - :edit a folder to open a file browser
" - <CR>/v/r to open in an h-split/v-split/tab
" - check |netrw-browse-maps| for more mappings

" SNIPPETS:

" Read an empty HTML template and move cursor to title
"nnoremap ,html "-1read $HOME/.vim/.skeleton.html<CR>3jwf>a

" NOW WE CAN:
" - Take of the world! (with much fewer keystrokes)

" BUILD INTEGRATION:

" Steal Mr. Bradley's formatter & add it to our spec_helper
" http://philipbradley.net/rspec-into-vim-with-quickfix

" Configure the 'make' command to run RSpec
"set makeprg=bundle\ exec\ rspec\ -f\ QuickfixFormatter

" NOW WE CAN:
" - Run :make to run RSpec
" - :cl to list errors
" - :cc# to jump to error by number
" - :cn and :cp to navigate forward and back


